제네릭
-함수나 클래스를 일반화 시키고, 매개 변수 타입을 지정하여 틀에서 찍어 내듯이 함수나 클래스 코드를 생산하는 기법.
=======================================================================================================

템플릿
- 함수나 클래스를 일반화하는 C++ 도구
-template 키워드로 함수, 클래스 선언
- 제네릭 타입 - 일반화를 위한 데이터 타입 

템플릿 선언
-  template<class T> 또는 template <typename T>
- 어러개일 경우 class T2 추가
=======================================================================================================

구체화
- 템플릿의 제네릭 타입에 구체적인 타입 지정
- 제네릭 타입에 구체적인 타입 지정 시 주의
=======================================================================================================

템플릿 장점
- 함수 코드 재사용 용이
템플릿 단점 
- 포팅에 취약(컴파일러에 따리 지원하지 않을 수 있음)
- 컴파일 오류 메시지 빈약, 디버깅 어려움
=======================================================================================================

STL
- 표준 템플릿 라이브러리
- 클래스와 제네릭 함수 포함
STL의 구성
- 컨테이너 : 템플릿 클래스
   -데이터를 담아두는 자료 구조를 표현한 클래스(리스트, 큐, 맵, 셋, 백터)
- iterator : 컨테이너 원소에 대한 포인터
    - 컨테이너의 원소들을 순회하면서 접근하기 위해 만들어진 컨테이너 원소에 대한 포인터
 - 알고리즘 : 템플릿 함수
     - 컨테이너 원소에 대한 복사, 검색, 삭제, 정렬등의 기능을 구현한 템플릿
     - 컨테이너의 멤버 함수 아님
STL 헤더파일 
 ex) #include<vectot> , #include<algorithm>
=======================================================================================================

vertor 컨테이너
 특징: 가변 길이 배열을 구현한 제네릭 클래스
    - 개발자가 벡터의 길이에 대한 고민할 필요 없음
원소의 저장, 삭제, 검색 등 다양한 멤버 함수 지원
벡터에 저장된 원소는 인덱스로 접근 가능
  - 인덱스는 0부터 시작
=======================================================================================================

iterator 
 - 반복자라고도 부름
 -  컨테이너의 원소를 가리키는 포인터

iterator 변수 선언
  - 구체적인 컨테이너를 지정하여 반복자 변수 생성
=======================================================================================================

map 컨테이너
('키', '값')의 쌍을 원소로 저장하는 제네릭 컨테이너
    - 동일한 '키'를 가진 원소가 중복 저장되면 오류 발생
    - '키' 로 '값' 검색
    - 많은 응용에서 필요
    - #include<map> 필요

=======================================================================================================
STL 알고리즘 함수
  - 템플릿 함수 
  - 전역 함수 :STL 컨테이너 클래스의 멤버 함수가 아님
   - iterator와 함께 작동

sort() 함수 사례
  - 두 개의 매개 변수
 - 첫 번째 매개 변수 : 소팅을 시작한 원소의 주소
  - 두 번째 매개 변수 : 소팅 범위의 마지막 원소 다음 주소 
=======================================================================================================

C++ 에서 auto
 
장점 : 복잡한 변수 선언을 간소하게, 긴 타입 선언 시 오타 줄임
=======================================================================================================

매개변수의 타입만 다르고 코드가 동일한 함수를 굳이 여러번 쓰지 않아도 되고 필요할때 마다 가져와서 사용하면 되는 방법이 편리한 것 같다 사용 방법만 잘 숙지 하고 있는다면 여러므로 쓸모가 많을 것 같다.




