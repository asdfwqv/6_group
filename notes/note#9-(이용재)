텍스트 파일 : 문자 만으로 구성된 문서
바이너리 파일 : 문자, 그림, 표, 사운드, 동영상 등으로 구성된 문서
======================================================================
 * 텍스트 파일 
   - 사람들이 사용하는 글자 혹은 문자들로만 구성되는 파일 
     - '\n', '\t' 등의 특수 문자도 포함
     - 각 문자마다 문자 코드 (이진수) 할당
     - 텍스트 파일의 종류
* 텍스트 파일과 <Enter> 키
     - <Enter> 키를 입력하면 텍스트 파일에는 '\r', '\n'의 두 코드가 기록됨

======================================================================
* 바이너리 파일?
    - 문자로 표현되지 않는 바이너리 데이터가 기록된 파일  
       - 텍스트 파일의 각 바이트 -> 문자로 해석
       - 바이너리 파일의 각 바이트 -> 문자로 해석되지 않는 것도 있음
* 바이너리 파일의 종류 
      - jpeg, bmp 등의 이미지 파일
      - mp3 등의 오디오 파일
      - hwp, doc, ppt 등의 확장자를 가진 멀티미디어 문서 파일
      - obj, exe 등의 확장자를 가진 컴파일된 코드나 실행 파일
======================================================================
* hwp 파일은 바이너리 파일이다.
    - 텍스트 정보 포함 (한글, 영어 문자 포함)
    - 바이너리 정보 포함 (글자 색이나 서채 등의 문자 포맷 정보, 비트맵 이미지)
======================================================================
* >> 연산자와 istream의 get, read() 함수
   - 연결된 장치로부터 읽는 함수
   - 키보드에 연결되면 키 입력을, 파일에 연결되면 파일에서 입력
* << 연산자와 ostream의 put(), write() 함수
     - 연결된 장치에 쓰는 함수
     - 스크린에 연결되면 화면에, 파일에 연결되면 파일에 출력
======================================================================
* C++ 파일 입출력 라이브러리 사용
    - <fstream> 헤더 파일과 std 이름 공간의 선언 필요
======================================================================
* 파일 입출력 방식 
    - C++ 파일 입출력 클래스는 두 방식 지원
* 텍스트 I/O
   - 문자 단위로 파일에 쓰기, 파일에서 읽기
    - 텍스트 파일에만 적용
* 바이너리 I/O
   - 바이트 단위로 파일에 쓰기, 파일에서 읽기
     - 텍스트 파일과 바이너리 파일 모두 입출력 가능
* 텍스트 I/O와 바이너리 I/O 입출력 시 차이점
    - 개형 문자('\n')를 다루는데 있음
======================================================================
* 파일 모드
    - 파일 입출력에 대한 구체적인 작업 형태에 대한 지정
* 파일 모드 지정 _ 파일 열때
    - open
    - ifstream
   - ofstream
======================================================================
* 텍스트 파일의 라인 단위 읽기 
    - istream의 getline(char* line, int n) 함수 이용
     - getline(ifstream& fin, string& line) 함수 이용
======================================================================
* 바이너리 I/O 방식 
    - 데이터의 바이너리 값을 그대로 파일에 저장하고나, 파일의 바이너리 값을 그대로 읽어서 변수나 버퍼에 저장하는 방식
    - 텍스트 파일이든 바이너리 파일이든 바이너리 I/O로 입출력 가능
 
* 바이너리 I/O 모드 열기
     - ios::binary 모드 속성 사용
======================================================================
* 파일의 끝을 처리하는 방법에는 차이가 없다.
    - 텍스트 I/O 든 바이너리 I/O 든 파일의 끝을 만나면 EOF 리턴
* 개행 문자 '\n' 를 읽고 쓸 때 서로 다르게 작동한다.
======================================================================
* 스트림 상태 
    - 파일 입출력이 진행되는 동안 스트림(열어 놓은 파일)에 관한 입출력 오류 저장
 ======================================================================
* C++ 파일 입출력 방식
     - 순차 접근
     - 임의 접근
* 파일 포인터 
     - 파일은 연속된 바이트의 집합
     - 파일 포인터
     - C++ 는 열려진 파일마다 두 개의 파일 포인터 유지
======================================================================
