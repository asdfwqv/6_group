가상 함수-virtual 키워드로 선언된 멤버 함수
virtual 키워드의 의미
    - 동적 바인딩 지시어.
    - 컴파일러에게 함수에 대한 호출 바인딩을 실행 시간까지 미루도록 지시.

===================================================================================

함수 오버라이딩
  - 파생 클래스에서 기본 클래스의 가상 함수와 동일한 이름의 함수 선언
     - 기본 클래스의 가상 함수의 존재감 상실시킴.
     - 파생 클래스에서 오버라이딩한 함수가 호출되도록 동적 바인딩
     - 함수 재정의 와 같은 말
     - 다형성 중 한 종류
%% 두개의 클래스에 같은 이름의 함수가 있다고 생각할 때 호출기회가 동등한 2개의 함수가 존재하지만,
가상 함수를 재정의 함수는 오버라이딩이 되므로 원래의 함수는 존재감이 상실되어 호출되지 않음.

오버 라이딩의 목적 : 파생 클래스에서 구현할 함수 인터페이스 제공

===================================================================================

동적 바인딩 
   - 파생 클래스에서만 
   - 기본 클래스에 대한 포인터로 가상 함수를 호출하는 경우
   - 객체 안에서 오버라이딩한 파생 클래스의 함수를 찾아 실행

===================================================================================

C++ 오버라이딩의 특징
  - 오버라이딩 성공 조건 : 가상 함수 이름, 매개 변수 타입과 개수, 리턴 타입이 모두 일치
  - 오버라이딩 시 virtual 지시어 생략 가능 : 가상 함수의 virtual 지시어는 상속되므로 파생 클래스에서 virtual 생략 가능
  - private, protect, public 자유롭게 지정 가능

===================================================================================

범위 지정 연산자(::)
  - 정적 바인딩 지시
   - 기본 클래스::가상함수() 형태로 기본 클래스의 가상 함수를 정적 바인딩으로 호출

===================================================================================

가상 소멸자
  - 소멸자를 virtual 키워드로 선언
   - 소멸자 호출 시 동적 바인딩 발생

===================================================================================

추상 클래스: 순수 가상 함수
 
기본 클래스의 가상 함수 목적
  - 파생 클래스에서 재정의 할 함수를 알려주는 역할
  - 기본 클래스의 가상함수를 굳이 구현 해야 하는가?

순수 가상 함수 
  - 함수의 코드가 없고 선언만 있는 가상 멤버 함수
class shape{
public:
  virtual void draw()=0;//순수 가상 함수 선언
};

  - 온전한 클래스가 아니므로  객체 생성 불가능
   - 포인터는 선언 가능

===================================================================================

추상 클래스의 목적 
  - 추상 클래스의 인스턴스를 생성할 목적이 아님
  - 상속에서 기본 클래스의 역할을 하기 위함
      - 순수 가상 함수를 통해 파생 클래스에서 구현 할 함수의 원형을 보여주는 인터페이스 역할
       - 추상 클래스의 모든 멤버 함수를 순수 가상 함수로 선언 할 필요 없음

===================================================================================

 추상 클래스를 단순 상속하면 파생 클래스도 자동으로 추상 클래스가 됨.
추상 클래스를 상속 받아 순수 가상 함수를 오버라이딩해서 구현 해야함.
