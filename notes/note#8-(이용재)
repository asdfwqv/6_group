스트림 
* 데이터의 흐름, 혹은 데이터를 전송하는 소프트웨어 모듈
    - 흐르는 시내와 유사한 개념
*  스트림의 양 끝에는 프로그램과 장치 연결
    - 보낸 순서대로 데이터 전달
     - 입출력 기본 단위 : 바이트

C++ 스트림 종류
* 입력 스트림
  - 입력 장치, 네트워크, 파일로부터 데이터를 프로그램으로 전달하는 스트림
* 출력 스트림
   - 프로그램에서 출력되는 데이터를 출력 장치, 네트워크, 파일 전달하는 스트림

========================================================================================================================================

C++ 입출력 스트림은 버퍼를 가짐

키 입력 스트림의 버퍼
    * 목적
     - 입력장치로부터 입력된 데이터를 프로그램으로 전달하기 전에 일시 저장
         - 키 입력 도중 수정 가능
   * C++ 응용 프로그램은 사용자의 키 입력이 끝난 시점에서 읽음
         - <Enter> 키 : 키 입력의 끝을 의미
         - <Enter> 키가 입력된 시점부터 키 입력 버퍼에서 프로그램이 읽기 시작

스크린 출력 스트림 버퍼
     * 목적
          - 프로그램에서 출력된 데이터를 출력 장치로 보내기 전에 일시 저장
          - 출력 장치를 반복적으로 사용하는 비효율성 개선
      * 버퍼가 꽉 차거나 강제 출력 명령 시에 출력 장치에 출력

========================================================================================================================================

입출력 방식 2가지
   * 스트림 입출력 방식(stream I/O)
      - 스트림 버퍼를 이용한 입출력 방식
         - 입력된 키는 버퍼에 저장 : <Enter> 키가 입력되면 프로그램이 버퍼에서 읽어가는 방식
         - 출력되는 데이터는 일차적으로 스트림 버퍼에 저장 (버퍼가 꽉 차거나, \n을 만나거나, 강제 출력 명령 시에만 버퍼가 출력 장치에 출력)
   * 저 수준 입출력 방식(raw level condole I/O)
       - 키가 입력되는 즉시 프로그램에게 키 값 전달 (<Backspace> 키 자체도 프로그램에세 바로 전달, 게임 등 키 입력이 즉각적으로 필요한 곳에 사용)
       - 프로그램이 출력하는 즉시 출력 장치에 출력
          - 컴파일러마다 다른 라이브러리나 API 지원 (C++ 프로그램의 호환성 낮음)
   * C++ 표준은 스트림 입출력 방식만 지원
          - 스트림 입출력은 모든 표준 C++ 컴파일러에 의해 컴파일됨
          - 높은 호환성
        
========================================================================================================================================

대표적인 구 표준 입출력 라이브러리 클래스
  * ios, istream, ostream, iostream, ifstream, ofstream, fstream
  * 문자를 한 바이트의 char로 처리
       - cin >> 로 문자를 읽을 때, 한글 문자 읽을 수 없음(영어나 기호: 1바이트의 문자 코드, 한글 문자: 2바이트의 문자 코드)
  * 지금도 마찬가지로 cin으로 한글을 문자 단위로는 읽을 수 없음

현재의 표준 C++입출력 라이브러리
  * 다양한 크기의 다국어 문자를 수용하기 위해, 입출력 라이브러리가 템플릿으로 작성됨

========================================================================================================================================

C++ 프로그램이 실행될 때 자동으로 생겨나는 스트림
   * cin : istream 타입의 스트림 객체로서 키보드 장치와 연결
   * cout : ostream 타입의 스트립 객체로서 스크린 장치와 연결
   * cerr : ostream 타입의 스트림 객체로서 스크린 장치와 연결, 오류 메시지 출력 목적, 스트림 내부 버퍼 거치지 않고 출력
   * clog : ostream 타입의 스트림 객체로서 스크린 장치와 연결, 오류 메시지 출력 목적, 스트림 내부에 버퍼 거쳐 출력

========================================================================================================================================

ostream 멤버 함수를 이용한 문자 출력
  * ostream& put(char ch)
     - ch의 문자를 스트림에 출력
  * ostream& write(char* str, int n)
     - str 배열에 있는 n개의 문자를 스트림에 출력
  * ostream& flush()
     - 현재 스트림 버퍼에 있는 내용 강제 출력

========================================================================================================================================

istream 멤버 함수 - 문자 입력, get() 함수
  * int get()
     - 입력 스트림에서 문자를 읽어 리턴.  오류나 EOF를 만나면 01(EOF) 리턴
  * istream& get(char& ch)
      - 입력 스트림에서 문자를 읽어 ch에 저장.  현재 입력 스트림 객체(*this)의 참조 리턴.  오류나 EOF를 만나면, 스트림 내부의 오류 플래그 세팅

========================================================================================================================================

문자열 입력
  *istream& get(char* s, int n)
      - 입력 스트립으로 부터 n-1 개의 문자를 읽어 배열 s에 저장하고 마지막에 '\0' 문자 삽입, 입력 	도중 '\n' 을 만나면 '\0' 을 삽입하고 리턴

   *get()이 읽는 도중 <Enter>키 ('\n')을 만날 때
          - 읽기를 중단하고 리턴
          - <Enter> 키('\n')는 스트림 버퍼에 남아있음

========================================================================================================================================

한줄 읽기
    * istream& get(char* s, char delim='\n')
       - 입력 스트림으로부터 최대 n-1개의 문자를 읽어 배열 s에 저장하고 마지막에 '\0' 문자 삽입, 
	  입력 도중 delim에 지정된 구분 문자를 만나면 지금까지 읽은 문자를 배열 s에 저장하고 리턴
    * istream& getline(char* s, int n, char delim='\n'
	- get()과 동일하지만 delim 에 지정된 구분 문자를 스트림에서 제거

=======================================================================================================================================

입력 문자 건너 띄기와 문자 개수 알아내기
     * istream& ignore(int n=1, int delim=EOF)
	- 입력 스트림에서 n개 문자 제거. 도중에 delim문자를 만나면 delim문자를 제거하고 리턴
 
     * int gcount()
	- 최근에 입력 스트립에서 읽은 바이트 수(문자의 개수) 리턴. <Enter> 키도 개수에 포함

=======================================================================================================================================

포맷 입출력
    * C++에서도 입출력 시 포맷 지정 가능
	- C 언어의 printf()와 유사
    
   * 포맷 입출력 방법 3 가지
	-포맷 플래그 (입출력 스트림에서 입출력 형식을 지정하기 위한 플래그)
	- 포맷 함수 
	- 조작자

=======================================================================================================================================

포맷 플래그를 세팅하는 멤버 함수
    * long setf(Long flags)
	- flags를 스트림의 포맷 플래그로 설정하고 이전 플래그를 리턴한다.
    * long unsetf(Long flags)
 	- flags에 설정된 비트 값에 따라 스트림의 포맷 플래그를 해제하고 이전 플래그를 리턴한다.

=======================================================================================================================================

포맷 함수 활용 
    * int width(int minWidth)
	- 출력되는 필드의 최소 너비를 minWidth로 설정하고 이전에 설정된 너비 값 리턴
    * char fill(char cFill)
	- 필드의 빈칸을 cFill 문자로 채우도록 지정하고 이전 문자 값 리턴
    * int precision(int np)
	- 출력되는 수의 유효 숫자 자리수를 np개로 설정. 정수 부분과 소수점 이하의 수의 자리를 모두 포함 하고 소수점 (.)은 제외

=======================================================================================================================================

조작자
    * manipulator, 스트림 조작자(stream manipulator)
   * 조작자는 함수
	- C++ 표준 라이브러리에 구현된 조작자 : 입출력 포맷 지정 목적
	- 개발자 만의 조작자 작성 가능 : 다양한 목적
	- 매개 변수 없는 조작자와 매개 변수를 가진 조작자로 구분
    * 조작자는 항상 <<,>> 연산자와 함께 사용됨

=======================================================================================================================================

삽입 연산자(<<)
   * insertion operator, 삽입자라고도 부름
	- << 연산자는 C++의 기본 연산자 : 정수 시프트 연산자
     * ostream 클래스에 중복 작성되어 있음

=======================================================================================================================================

추출 연산자(>>)
    * extraction operator
	- >> 연산자는 C++ 의 기본 연산자 : 정수 시프트 연산자
      * ostream 클래스에 중복 작성되어 있음
       * 추출 연산자의 실행 과정
	- 삽입 연산자의 실행 과정과 유사하므로 생략

=======================================================================================================================================

사용자가 추출 연산자 만들기
    * 개발자가 작성한 클래스의 객체에 >> 연산자로 입력 

=======================================================================================================================================

사용자 정의 조작자 함수 원형
    * 매개 변수 없는 조작자의 경우
	- istream& manipulatorFunction(istream& ins)
	- ostream& manipulatorFunction(ostream& outs)
